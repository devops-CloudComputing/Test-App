name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  security-scan:
    name: Security Scan (SAST + deps)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install scanners
        run: |
          python -m pip install --upgrade pip
          pip install bandit pip-audit
          sudo apt-get update && sudo apt-get install -y jq

      - name: Run Bandit (SAST) → fail only on HIGH/CRITICAL
        shell: bash
        run: |
          set -e
          TARGET="app"; [ -d "$TARGET" ] || TARGET="."
          bandit -r "$TARGET" -f json -o bandit.json || true
          HIGH_COUNT=$(jq -r '
            def toresults:
              if type=="object" and has("results") then .results
              elif type=="array" then .
              else [] end;
            toresults
            | map(select(.issue_severity=="HIGH" or .issue_severity=="CRITICAL"))
            | length
          ' bandit.json 2>/dev/null || echo 0)
          echo "Bandit HIGH/CRITICAL findings: ${HIGH_COUNT}"
          if [ "${HIGH_COUNT}" -gt 0 ]; then
            echo "❌ High/Critical SAST findings found"; exit 1
          else
            echo "✅ No High/Critical SAST findings"
          fi

      - name: Run pip-audit (deps) → fail only on HIGH/CRITICAL
        shell: bash
        run: |
          set -e
          REQ=""
          if [ -f "requirements.txt" ]; then REQ="requirements.txt"; fi
          if [ -z "$REQ" ] && [ -f "app/requirements.txt" ]; then REQ="app/requirements.txt"; fi
          if [ -n "$REQ" ]; then
            pip install -r "$REQ" || true
            pip-audit -r "$REQ" -f json -o pip-audit.json || true
          else
            pip-audit -f json -o pip-audit.json || true
          fi
          HIGH_CRIT_COUNT=$(jq '[.dependencies[]?.vulns[]? | select(.severity=="HIGH" or .severity=="CRITICAL")] | length' pip-audit.json 2>/dev/null || echo 0)
          echo "pip-audit HIGH/CRITICAL: ${HIGH_CRIT_COUNT}"
          if [ "${HIGH_CRIT_COUNT}" -gt 0 ]; then
            echo "❌ High/Critical dependency vulns found"; exit 1
          else
            echo "✅ No High/Critical dependency vulns"
          fi

      - name: Upload scan artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit.json
            pip-audit.json
          if-no-files-found: ignore

  test:
    name: Run unit tests (pytest)
    needs: [ security-scan ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          elif [ -f "app/requirements.txt" ]; then
            pip install -r app/requirements.txt
          fi
          pip install pytest pytest-cov

      - name: Run pytest with coverage
        env:
          PYTHONPATH: .
        shell: bash
        run: |
          if [ -d "app/tests" ]; then
            pytest -q --maxfail=1 --disable-warnings --cov=app --cov-report=term-missing
          else
            echo "No tests found (app/tests). Skipping."
          fi

      - name: Upload pytest results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: pytest-results.xml
          if-no-files-found: ignore

  build:
    name: Build Docker image (with lint)
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: app/Dockerfile

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image (tag with full SHA and short SHA)
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          docker build -t myapp:${GITHUB_SHA} -t myapp:${SHORT_SHA} ./app
          echo "Built tags: myapp:${GITHUB_SHA} and myapp:${SHORT_SHA}"

    image-scan:
    name: Image Security Scan (Trivy)
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Trivy
        uses: aquasecurity/setup-trivy@v0.19.0

      - name: Scan Docker image with Trivy (non-blocking)
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          trivy image --exit-code 0 --severity HIGH,CRITICAL --format table --output trivy-report.txt myapp:${SHORT_SHA}

      - name: Upload Trivy report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.txt
